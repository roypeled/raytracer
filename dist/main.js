(()=>{"use strict";eval('\n;// CONCATENATED MODULE: ./src/Utils.ts\n\nfunction degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\nfunction randomInRange(min, max) {\n    return min + (max - min) * Math.random();\n}\nfunction clamp(x, min, max) {\n    if (x < min)\n        return min;\n    if (x > max)\n        return max;\n    return x;\n}\nfunction randomInUnitSphere() {\n    while (true) {\n        var p = Vector_Vector.randomInRange(-1, 1);\n        if (p.length_squared() >= 1)\n            continue;\n        return p;\n    }\n}\nfunction randomUnitVector() {\n    return Vector_Vector.unitVector(randomInUnitSphere());\n}\nfunction randomInHemisphere(normal) {\n    var inUnitSphere = randomInUnitSphere();\n    if (Vector.dot(inUnitSphere, normal) > 0)\n        return inUnitSphere;\n    else\n        return inUnitSphere.multiply(-1);\n}\nfunction randomInUnitDisk() {\n    while (true) {\n        var p = new Vector_Vector(randomInRange(-1, 1), randomInRange(-1, 1), 0);\n        if (p.length_squared() >= 1)\n            continue;\n        return p;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Vector.ts\n\nvar Vector_Vector = /** @class */ (function () {\n    function Vector(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    Vector.prototype.subtract = function (v) {\n        if (v instanceof Vector)\n            return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        else\n            return new Vector(this.x - v, this.y - v, this.z - v);\n    };\n    Vector.prototype.subtractFrom = function (v) {\n        return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n    };\n    Vector.prototype.add = function (v) {\n        if (v instanceof Vector)\n            return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        else\n            return new Vector(this.x + v, this.y + v, this.z + v);\n    };\n    Vector.prototype.multiply = function (v) {\n        if (v instanceof Vector)\n            return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        else\n            return new Vector(this.x * v, this.y * v, this.z * v);\n    };\n    Vector.prototype.divide = function (v) {\n        if (v instanceof Vector)\n            return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        else\n            return new Vector(this.x / v, this.y / v, this.z / v);\n    };\n    Vector.prototype.length_squared = function () {\n        var sqrd = this.multiply(this);\n        return sqrd.x + sqrd.y + sqrd.z;\n    };\n    Vector.prototype.length = function () {\n        return Math.sqrt(this.length_squared());\n    };\n    Vector.prototype.writeColor = function (samplesPerPixel) {\n        return Vector.writeColor(this, samplesPerPixel);\n    };\n    Vector.prototype.nearZero = function () {\n        var s = 1e-8;\n        return (Math.abs(this.x) < s)\n            && (Math.abs(this.y) < s)\n            && (Math.abs(this.z) < s);\n    };\n    Vector.reflect = function (v1, v2) {\n        return v1.subtract(v2.multiply(2 * Vector.dot(v1, v2)));\n    };\n    Vector.refract = function (v1, v2, etaiOverEtat) {\n        var cosTheta = Math.min(Vector.dot(v1.multiply(-1), v2), 1);\n        var rOutPerp = v1.add(v2.multiply(cosTheta))\n            .multiply(etaiOverEtat);\n        var rOutParallel = v2.multiply(-Math.sqrt(Math.abs(1 - rOutPerp.length_squared())));\n        return rOutPerp.add(rOutParallel);\n    };\n    Vector.add = function (v1, v2) {\n        return v1.add(v2);\n    };\n    Vector.subtract = function (v1, v2) {\n        return v1.subtract(v2);\n    };\n    Vector.multiply = function (v1, v2) {\n        return v1.multiply(v2);\n    };\n    Vector.divide = function (t, v) {\n        return v.divide(t);\n    };\n    Vector.dot = function (v1, v2) {\n        return v1.x * v2.x\n            + v1.y * v2.y\n            + v1.z * v2.z;\n    };\n    Vector.cross = function (v1, v2) {\n        return new Vector(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n    };\n    Vector.unitVector = function (v) {\n        return v.divide(v.length());\n    };\n    Vector.writeColor = function (v, samplesPerPixel) {\n        var r = v.x;\n        var g = v.y;\n        var b = v.z;\n        var scale = 1 / samplesPerPixel;\n        r = Math.sqrt(scale * r);\n        g = Math.sqrt(scale * g);\n        b = Math.sqrt(scale * b);\n        return [\n            256 * clamp(r, 0, .999),\n            256 * clamp(g, 0, .999),\n            256 * clamp(b, 0, .999),\n            255,\n        ];\n    };\n    Vector.random = function () {\n        return new Vector(Math.random(), Math.random(), Math.random());\n    };\n    Vector.randomInRange = function (min, max) {\n        return new Vector(randomInRange(min, max), randomInRange(min, max), randomInRange(min, max));\n    };\n    return Vector;\n}());\n\n\n;// CONCATENATED MODULE: ./src/Hittable.ts\n\nvar HitRecord = /** @class */ (function () {\n    function HitRecord(p, t, normal) {\n        if (p === void 0) { p = null; }\n        if (t === void 0) { t = null; }\n        if (normal === void 0) { normal = null; }\n        this.p = p;\n        this.t = t;\n        this.normal = normal;\n    }\n    HitRecord.prototype.setFaceNormal = function (r, outwardNormal) {\n        this.frontFace = Vector_Vector.dot(r.direction, outwardNormal) < 0;\n        this.normal = this.frontFace ? outwardNormal : outwardNormal.multiply(-1);\n    };\n    return HitRecord;\n}());\n\n\n;// CONCATENATED MODULE: ./src/Ray.ts\n\n\nvar Ray = /** @class */ (function () {\n    function Ray(origin, direction) {\n        this.origin = origin;\n        this.direction = direction;\n    }\n    Ray.prototype.at = function (t) {\n        return this.origin.add(this.direction.multiply(t));\n    };\n    Ray.prototype.hitSphere = function (center, radius, r) {\n        var oc = r.origin.subtract(center);\n        var a = r.direction.length_squared();\n        var halfB = Vector_Vector.dot(oc, r.direction);\n        var c = oc.length_squared() - radius * radius;\n        var discriminant = halfB * halfB - a * c;\n        if (discriminant < 0) {\n            return -1;\n        }\n        return (-halfB - Math.sqrt(discriminant)) / a;\n    };\n    Ray.prototype.color = function (world, depth) {\n        if (depth <= 0)\n            return new Vector_Vector(0, 0, 0);\n        var rec = new HitRecord();\n        if (world.hit(this, 0.00001, Infinity, rec)) {\n            var scattered = new Ray(null, null);\n            var attenuation = new Vector_Vector(0, 0, 0);\n            if (rec.material.scatter(this, rec, attenuation, scattered))\n                return attenuation.multiply(scattered.color(world, depth - 1));\n            return new Vector_Vector(0, 0, 0);\n        }\n        var unitDirection = Vector_Vector.unitVector(this.direction);\n        var t = .5 * (unitDirection.y + 1);\n        var white = new Vector_Vector(1, 1, 1);\n        var blue = new Vector_Vector(.5, .7, 1);\n        return white\n            .multiply(1 - t)\n            .add(blue.multiply(t));\n    };\n    return Ray;\n}());\n\n\n;// CONCATENATED MODULE: ./src/Camera.ts\n\n\n\nvar Camera = /** @class */ (function () {\n    function Camera(lookFrom, lookAt, vUp, vFov, aspectRatio, aperture, focusDist) {\n        this.lookFrom = lookFrom;\n        this.lookAt = lookAt;\n        this.vUp = vUp;\n        this.vFov = vFov;\n        this.aspectRatio = aspectRatio;\n        this.aperture = aperture;\n        this.focusDist = focusDist;\n        this.init();\n    }\n    Camera.prototype.moveRight = function () {\n        this.lookFrom.z += .5;\n        this.init();\n    };\n    Camera.prototype.moveLeft = function () {\n        this.lookFrom.z -= .5;\n        this.init();\n    };\n    Camera.prototype.moveUp = function () {\n        this.lookFrom.y += .5;\n        this.init();\n    };\n    Camera.prototype.moveDown = function () {\n        this.lookFrom.y -= .5;\n        this.init();\n    };\n    Camera.prototype.zoomIn = function () {\n        this.vFov -= .5;\n        this.init();\n    };\n    Camera.prototype.zoomOut = function () {\n        this.vFov += .5;\n        this.init();\n    };\n    Camera.prototype.init = function () {\n        var theta = degreesToRadians(this.vFov);\n        var h = Math.tan(theta / 2);\n        this.viewportHeight = 2 * h;\n        this.viewportWidth = this.aspectRatio * this.viewportHeight;\n        var w = Vector_Vector.unitVector(this.lookFrom.subtract(this.lookAt));\n        this.u = Vector_Vector.unitVector(Vector_Vector.cross(this.vUp, w));\n        this.v = Vector_Vector.cross(w, this.u);\n        this.lensRadius = this.aperture / 2;\n        this.origin = this.lookFrom;\n        this.horizontal = this.u.multiply(this.viewportWidth).multiply(this.focusDist);\n        this.vertical = this.v.multiply(this.viewportHeight).multiply(this.focusDist);\n        this.lowerLeftCorner = this.origin\n            .subtract(this.horizontal.divide(2))\n            .subtract(this.vertical.divide(2))\n            .subtract(w.multiply(this.focusDist));\n    };\n    Camera.prototype.getRay = function (s, t) {\n        var rd = randomInUnitDisk().multiply(this.lensRadius);\n        var offset = this.u.multiply(rd.x)\n            .add(this.v.multiply(rd.y));\n        return new Ray(this.origin.add(offset), this.lowerLeftCorner\n            .add(this.horizontal.multiply(s))\n            .add(this.vertical.multiply(t))\n            .subtract(this.origin)\n            .subtract(offset));\n    };\n    return Camera;\n}());\n\n\n;// CONCATENATED MODULE: ./src/HittableList.ts\nvar HittableList = /** @class */ (function () {\n    function HittableList() {\n        this.list = [];\n    }\n    HittableList.prototype.add = function (object) {\n        this.list.push(object);\n    };\n    HittableList.prototype.clear = function () {\n        this.list = [];\n    };\n    HittableList.prototype.hit = function (r, tMin, tMax, record) {\n        var tempRec = record;\n        var hitAnything = false;\n        var closestSoFar = tMax;\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var object = _a[_i];\n            if (object.hit(r, tMin, closestSoFar, tempRec)) {\n                hitAnything = true;\n                closestSoFar = tempRec.t;\n                this.merge(record, tempRec);\n            }\n        }\n        return hitAnything;\n    };\n    HittableList.prototype.merge = function (target, object) {\n        target.normal = object.normal;\n        target.frontFace = object.frontFace;\n        target.material = object.material;\n        target.p = object.p;\n        target.t = object.t;\n    };\n    return HittableList;\n}());\n\n\n;// CONCATENATED MODULE: ./src/Material.ts\n\n\n\nvar Lambertian = /** @class */ (function () {\n    function Lambertian(color) {\n        this.color = color;\n    }\n    Lambertian.prototype.scatter = function (rIn, rec, attenuation, scattered) {\n        var scatterDirection = rec.normal.add(randomUnitVector());\n        if (scatterDirection.nearZero())\n            scatterDirection = rec.normal;\n        Object.assign(scattered, new Ray(rec.p, scatterDirection));\n        Object.assign(attenuation, this.color);\n        return true;\n    };\n    return Lambertian;\n}());\n\nvar Metal = /** @class */ (function () {\n    function Metal(color, fuzz) {\n        this.color = color;\n        this.fuzz = fuzz;\n    }\n    Metal.prototype.scatter = function (rIn, rec, attenuation, scattered) {\n        var reflect = Vector_Vector.reflect(Vector_Vector.unitVector(rIn.direction), rec.normal);\n        Object.assign(scattered, new Ray(rec.p, reflect.add(randomInUnitSphere().multiply(this.fuzz))));\n        Object.assign(attenuation, this.color);\n        return Vector_Vector.dot(scattered.direction, rec.normal) > 0;\n    };\n    return Metal;\n}());\n\nvar Dielectric = /** @class */ (function () {\n    function Dielectric(indexOfRefraction) {\n        this.indexOfRefraction = indexOfRefraction;\n    }\n    Dielectric.prototype.scatter = function (rIn, rec, attenuation, scattered) {\n        var refractionRatio = rec.frontFace ? 1 / this.indexOfRefraction : this.indexOfRefraction;\n        var unitDirection = Vector_Vector.unitVector(rIn.direction);\n        var cosTheta = Math.min(Vector_Vector.dot(unitDirection.multiply(-1), rec.normal), 1);\n        var sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n        var cannotRefract = refractionRatio * sinTheta > 1;\n        var direction;\n        if (cannotRefract || this.reflectance(cosTheta, refractionRatio) > Math.random())\n            direction = Vector_Vector.reflect(unitDirection, rec.normal);\n        else\n            direction = Vector_Vector.refract(unitDirection, rec.normal, refractionRatio);\n        Object.assign(scattered, new Ray(rec.p, direction));\n        Object.assign(attenuation, new Vector_Vector(1, 1, 1));\n        return true;\n    };\n    Dielectric.prototype.reflectance = function (cosine, refIdx) {\n        var r0 = (1 - refIdx) / (1 + refIdx);\n        r0 = r0 * r0;\n        return r0 + (1 - r0) * Math.pow((1 - cosine), 5);\n    };\n    return Dielectric;\n}());\n\n\n;// CONCATENATED MODULE: ./src/Sphere.ts\n\nvar Sphere = /** @class */ (function () {\n    function Sphere(center, radius, material) {\n        this.center = center;\n        this.radius = radius;\n        this.material = material;\n    }\n    Sphere.prototype.hit = function (r, tMin, tMax, rec) {\n        var oc = r.origin.subtract(this.center);\n        var a = r.direction.length_squared();\n        var halfB = Vector_Vector.dot(oc, r.direction);\n        var c = oc.length_squared() - this.radius * this.radius;\n        var discriminant = halfB * halfB - a * c;\n        if (discriminant < 0)\n            return false;\n        var sqrt = Math.sqrt(discriminant);\n        var root = (-halfB - sqrt) / a;\n        if (root < tMin || tMax < root) {\n            root = (-halfB + sqrt) / a;\n            if (root < tMin || tMax < root)\n                return false;\n        }\n        rec.t = root;\n        rec.p = r.at(rec.t);\n        var outwardNormal = rec.p\n            .subtract(this.center)\n            .divide(this.radius);\n        rec.setFaceNormal(r, outwardNormal);\n        rec.material = this.material;\n        return true;\n    };\n    return Sphere;\n}());\n\n\n;// CONCATENATED MODULE: ./src/RandomScene.ts\n\n\n\n\n\nvar RandomScene = /** @class */ (function () {\n    function RandomScene() {\n        this.world = new HittableList();\n        this.groundMat = new Lambertian(new Vector_Vector(.5, .5, .5));\n        this.world.add(new Sphere(new Vector_Vector(0, -1000, 0), 1000, this.groundMat));\n        var balls = 5;\n        for (var a = -balls; a < balls; a++) {\n            for (var b = -balls; b < balls; b++) {\n                var autoChooseMat = Math.random();\n                var center = new Vector_Vector(a + 0.9 * Math.random(), 0.2, b + 0.9 * Math.random());\n                if ((center.subtract(new Vector_Vector(4, 0.2, 0))).length() > 0.9) {\n                    var r = randomInRange(.01, .4);\n                    if (autoChooseMat < 0.8) {\n                        // diffuse\n                        var albedo = Vector_Vector.random().multiply(Vector_Vector.random());\n                        var sphereMaterial = new Lambertian(albedo);\n                        this.world.add(new Sphere(center, r, sphereMaterial));\n                    }\n                    else if (autoChooseMat < 0.95) {\n                        // metal\n                        var albedo = Vector_Vector.randomInRange(0.5, 1);\n                        var fuzz = randomInRange(0, 0.5);\n                        var sphereMaterial = new Metal(albedo, fuzz);\n                        this.world.add(new Sphere(center, r, sphereMaterial));\n                    }\n                    else {\n                        // glass\n                        var sphereMaterial = new Dielectric(1.5);\n                        this.world.add(new Sphere(center, r, sphereMaterial));\n                    }\n                }\n            }\n        }\n        var material1 = new Dielectric(1.5);\n        this.world.add(new Sphere(new Vector_Vector(0, 1, 0), randomInRange(.5, 1), material1));\n        var material2 = new Lambertian(new Vector_Vector(0.4, 0.2, 0.1));\n        this.world.add(new Sphere(new Vector_Vector(-4, 1, 0), randomInRange(.5, 1), material2));\n        var material3 = new Metal(new Vector_Vector(0.7, 0.6, 0.5), 0.0);\n        this.world.add(new Sphere(new Vector_Vector(4, 1, 0), randomInRange(.5, 1), material3));\n    }\n    return RandomScene;\n}());\n\n\n;// CONCATENATED MODULE: ./src/Stats.ts\nvar Stats = /** @class */ (function () {\n    function Stats() {\n        this.start = new Date().getTime();\n        this.message = "Use arrow keys to move camera, \'o\' - zoom out, \'i\' - zoom in";\n        this.el = document.createElement("pre");\n        this.el.innerText = this.message;\n        document.body.appendChild(this.el);\n    }\n    Stats.prototype.set = function (totalPixels, renderedPixels, pointsPerFrame) {\n        var percentage = Math.round(renderedPixels / totalPixels * 100);\n        var now = new Date().getTime();\n        var duration = now - this.start;\n        var elapsedMinutes = Math.floor(duration / (1000 * 60));\n        var elapsedSeconds = Math.floor((duration - (elapsedMinutes * 1000 * 60)) / 1000);\n        this.el.innerText = this.message + " || " + percentage + "% || " + elapsedMinutes + ":" + elapsedSeconds + " elapsed || rendered " + pointsPerFrame + " points per frame";\n    };\n    return Stats;\n}());\nvar stats = new Stats();\n\n;// CONCATENATED MODULE: ./src/Renderer.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\nvar ASPECT_RATIO = 3 / 2;\nvar lookFrom = new Vector_Vector(13, 2, 3);\nvar lookAt = new Vector_Vector(0, 0, 0);\nvar vup = new Vector_Vector(0, 1, 0);\nvar distToFocus = 10;\nvar aperture = .1;\nvar imageWidth = 600;\nvar Renderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    Renderer.createCanvas = function () {\n        if (this.canvas)\n            return;\n        this.IMAGE_HEIGHT = this.IMAGE_WIDTH / ASPECT_RATIO;\n        this.canvas = document.createElement(\'canvas\');\n        this.canvas.setAttribute(\'style\', \'transform: rotate(180deg)\');\n        this.ctx = this.canvas.getContext(\'2d\');\n        this.canvas.setAttribute(\'width\', this.IMAGE_WIDTH + "px");\n        this.canvas.setAttribute(\'height\', this.IMAGE_HEIGHT + "px");\n        document.body.appendChild(this.canvas);\n        this.imageData = this.ctx.createImageData(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\n        this.data = this.imageData.data;\n    };\n    Renderer.wait = function (time) {\n        if (time === void 0) { time = 0; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, time); })];\n            });\n        });\n    };\n    Renderer.smartRender = function () {\n        var _this = this;\n        var cancel = function () { return Promise.resolve(); };\n        var canceled = false;\n        function run() {\n            return __awaiter(this, void 0, void 0, function () {\n                var render;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            render = Renderer.quickRender();\n                            cancel = render.cancel;\n                            return [4 /*yield*/, render.action];\n                        case 1:\n                            _a.sent();\n                            if (canceled)\n                                return [2 /*return*/];\n                            render = Renderer.fullRender();\n                            cancel = render.cancel;\n                            return [4 /*yield*/, render.action];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        }\n        run();\n        return function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                console.log(\'cancel\');\n                canceled = true;\n                return [2 /*return*/, cancel()];\n            });\n        }); };\n    };\n    Renderer.quickRender = function () {\n        return this.render(1, 3, false);\n    };\n    Renderer.fullRender = function () {\n        return this.render(10, 20, true);\n    };\n    Renderer.render = function (samplesPerPixel, maxDepth, showStats) {\n        var _this = this;\n        if (showStats === void 0) { showStats = false; }\n        var cancelled = false;\n        this.firstRun = false;\n        var render = function () { return __awaiter(_this, void 0, void 0, function () {\n            var j, i, frameLength, start, count, frameCount, _i, _a, _b, i, j, now;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        // Image\n                        this.createCanvas();\n                        this.renderPoints = [];\n                        for (j = this.IMAGE_HEIGHT - 1; j >= 0; --j) {\n                            for (i = 0; i < this.IMAGE_WIDTH; ++i) {\n                                this.renderPoints.push([i, j]);\n                            }\n                        }\n                        this.renderPoints = this.renderPoints.sort(function () { return Math.random() - .5; });\n                        frameLength = 1000 / 24 * .8;\n                        console.log(\'render frameLength\', frameLength);\n                        start = new Date().getTime();\n                        showStats && stats.set(this.renderPoints.length, 0, 0);\n                        count = 0;\n                        frameCount = 0;\n                        _i = 0, _a = this.renderPoints;\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], i = _b[0], j = _b[1];\n                        this.renderRay(i, j, samplesPerPixel, maxDepth);\n                        count++;\n                        frameCount++;\n                        now = new Date().getTime();\n                        if (!(now - start > frameLength)) return [3 /*break*/, 3];\n                        this.ctx.putImageData(this.imageData, 0, 0);\n                        now = new Date().getTime();\n                        return [4 /*yield*/, this.wait(1000 / 24 - (now - start))];\n                    case 2:\n                        _c.sent();\n                        if (cancelled) {\n                            console.log(\'before cancel\', count);\n                            return [2 /*return*/];\n                        }\n                        showStats && stats.set(this.renderPoints.length, count, frameCount);\n                        start = now;\n                        frameCount = 0;\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        this.ctx.putImageData(this.imageData, 0, 0);\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        return {\n            action: render(),\n            cancel: function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            console.log(\'canceling\');\n                            this.ctx.putImageData(this.imageData, 0, 0);\n                            return [4 /*yield*/, this.wait(1000 / 24)];\n                        case 1:\n                            _a.sent();\n                            cancelled = true;\n                            return [2 /*return*/];\n                    }\n                });\n            }); }\n        };\n    };\n    Renderer.renderRay = function (i, j, samplesPerPixel, maxDepth) {\n        var color = new Vector_Vector(0, 0, 0);\n        for (var s = 0; s < samplesPerPixel; ++s) {\n            var u = (i + Math.random()) / (this.IMAGE_WIDTH - 1);\n            var v = (j + Math.random()) / (this.IMAGE_HEIGHT - 1);\n            var ray = this.camera.getRay(u, v);\n            color = color.add(ray.color(this.world, maxDepth));\n        }\n        var _a = color.writeColor(samplesPerPixel), r = _a[0], g = _a[1], b = _a[2], a = _a[3];\n        var startIndex = (j * this.IMAGE_WIDTH * 4) + (i * 4);\n        this.data[startIndex] = r;\n        this.data[startIndex + 1] = g;\n        this.data[startIndex + 2] = b;\n        this.data[startIndex + 3] = a;\n    };\n    Renderer.IMAGE_WIDTH = imageWidth;\n    Renderer.firstRun = true;\n    Renderer.renderPoints = [];\n    Renderer.world = new RandomScene().world;\n    // Camera\n    Renderer.camera = new Camera(lookFrom, lookAt, vup, 20, ASPECT_RATIO, aperture, distToFocus);\n    return Renderer;\n}());\n\n\n;// CONCATENATED MODULE: ./src/index.ts\nvar src_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar src_generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nfunction debounce(func, interval) {\n    var called = 0;\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var now = new Date().getTime();\n        if (now - called > interval) {\n            func.apply(func, args);\n            console.log(\'yes\', now - called);\n            called = now;\n        }\n        else {\n            console.log(\'not\');\n        }\n    };\n}\nfunction run() {\n    return src_awaiter(this, void 0, void 0, function () {\n        function onKeypress(e) {\n            return src_awaiter(this, void 0, void 0, function () {\n                var _a;\n                return src_generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            e.preventDefault();\n                            _a = e.keyCode;\n                            switch (_a) {\n                                case 37: return [3 /*break*/, 1];\n                                case 39: return [3 /*break*/, 3];\n                                case 38: return [3 /*break*/, 5];\n                                case 40: return [3 /*break*/, 7];\n                                case 73: return [3 /*break*/, 9];\n                                case 79: return [3 /*break*/, 11];\n                            }\n                            return [3 /*break*/, 13];\n                        case 1: return [4 /*yield*/, canceller()];\n                        case 2:\n                            _b.sent();\n                            Renderer.camera.moveLeft();\n                            canceller = Renderer.smartRender();\n                            return [3 /*break*/, 13];\n                        case 3: return [4 /*yield*/, canceller()];\n                        case 4:\n                            _b.sent();\n                            Renderer.camera.moveRight();\n                            canceller = Renderer.smartRender();\n                            return [3 /*break*/, 13];\n                        case 5: return [4 /*yield*/, canceller()];\n                        case 6:\n                            _b.sent();\n                            Renderer.camera.moveUp();\n                            canceller = Renderer.smartRender();\n                            return [3 /*break*/, 13];\n                        case 7: return [4 /*yield*/, canceller()];\n                        case 8:\n                            _b.sent();\n                            Renderer.camera.moveDown();\n                            canceller = Renderer.smartRender();\n                            return [3 /*break*/, 13];\n                        case 9: return [4 /*yield*/, canceller()];\n                        case 10:\n                            _b.sent();\n                            Renderer.camera.zoomIn();\n                            canceller = Renderer.smartRender();\n                            return [3 /*break*/, 13];\n                        case 11: return [4 /*yield*/, canceller()];\n                        case 12:\n                            _b.sent();\n                            Renderer.camera.zoomOut();\n                            canceller = Renderer.smartRender();\n                            return [3 /*break*/, 13];\n                        case 13: return [2 /*return*/];\n                    }\n                });\n            });\n        }\n        var canceller;\n        return src_generator(this, function (_a) {\n            document.body.addEventListener(\'keydown\', debounce(onKeypress, 100));\n            canceller = Renderer.smartRender();\n            return [2 /*return*/];\n        });\n    });\n}\nrun();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///915\n')})();