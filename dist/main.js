(()=>{"use strict";eval("\n;// CONCATENATED MODULE: ./src/Utils.ts\n\nfunction degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\nfunction randomInRange(min, max) {\n    return min + (max - min) * Math.random();\n}\nfunction clamp(x, min, max) {\n    if (x < min)\n        return min;\n    if (x > max)\n        return max;\n    return x;\n}\nfunction randomInUnitSphere() {\n    while (true) {\n        let p = Vector_Vector.randomInRange(-1, 1);\n        if (p.length_squared() >= 1)\n            continue;\n        return p;\n    }\n}\nfunction randomUnitVector() {\n    return Vector_Vector.unitVector(randomInUnitSphere());\n}\nfunction randomInHemisphere(normal) {\n    let inUnitSphere = randomInUnitSphere();\n    if (Vector.dot(inUnitSphere, normal) > 0)\n        return inUnitSphere;\n    else\n        return inUnitSphere.multiplyNum(-1);\n}\nfunction randomInUnitDisk() {\n    while (true) {\n        let p = new Vector_Vector(randomInRange(-1, 1), randomInRange(-1, 1), 0);\n        if (p.length_squared() >= 1)\n            continue;\n        return p;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Vector.ts\n\nclass Vector_Vector {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    subtract(v) {\n        return new Vector_Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subtractNum(v) {\n        return new Vector_Vector(this.x - v, this.y - v, this.z - v);\n    }\n    subtractFrom(v) {\n        return new Vector_Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    add(v) {\n        return new Vector_Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addNum(v) {\n        return new Vector_Vector(this.x + v, this.y + v, this.z + v);\n    }\n    multiply(v) {\n        return new Vector_Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n    }\n    multiplyNum(v) {\n        return new Vector_Vector(this.x * v, this.y * v, this.z * v);\n    }\n    divide(v) {\n        return new Vector_Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n    }\n    divideNum(v) {\n        return new Vector_Vector(this.x / v, this.y / v, this.z / v);\n    }\n    length_squared() {\n        const sqrd = this.multiply(this);\n        return sqrd.x + sqrd.y + sqrd.z;\n    }\n    length() {\n        return Math.sqrt(this.length_squared());\n    }\n    writeColor(samplesPerPixel) {\n        return Vector_Vector.writeColor(this, samplesPerPixel);\n    }\n    nearZero() {\n        const s = 1e-8;\n        return (Math.abs(this.x) < s)\n            && (Math.abs(this.y) < s)\n            && (Math.abs(this.z) < s);\n    }\n    static reflect(v1, v2) {\n        return v1.subtract(v2.multiplyNum(2 * Vector_Vector.dot(v1, v2)));\n    }\n    static refract(v1, v2, etaiOverEtat) {\n        let cosTheta = Math.min(Vector_Vector.dot(v1.multiplyNum(-1), v2), 1);\n        let rOutPerp = v1.add(v2.multiplyNum(cosTheta))\n            .multiplyNum(etaiOverEtat);\n        let rOutParallel = v2.multiplyNum(-Math.sqrt(Math.abs(1 - rOutPerp.length_squared())));\n        return rOutPerp.add(rOutParallel);\n    }\n    static add(v1, v2) {\n        return v1.add(v2);\n    }\n    static subtract(v1, v2) {\n        return v1.subtract(v2);\n    }\n    static multiply(v1, v2) {\n        return v1.multiply(v2);\n    }\n    static multiplyNum(v1, v2) {\n        return v1.multiplyNum(v2);\n    }\n    static divide(t, v) {\n        return v.divideNum(t);\n    }\n    static dot(v1, v2) {\n        return v1.x * v2.x\n            + v1.y * v2.y\n            + v1.z * v2.z;\n    }\n    static cross(v1, v2) {\n        return new Vector_Vector(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n    }\n    static unitVector(v) {\n        return v.divideNum(v.length());\n    }\n    static writeColor(v, samplesPerPixel) {\n        let r = v.x;\n        let g = v.y;\n        let b = v.z;\n        let scale = 1 / samplesPerPixel;\n        r = Math.sqrt(scale * r);\n        g = Math.sqrt(scale * g);\n        b = Math.sqrt(scale * b);\n        return [\n            256 * clamp(r, 0, .999),\n            256 * clamp(g, 0, .999),\n            256 * clamp(b, 0, .999),\n            255,\n        ];\n    }\n    static random() {\n        return new Vector_Vector(Math.random(), Math.random(), Math.random());\n    }\n    static randomInRange(min, max) {\n        return new Vector_Vector(randomInRange(min, max), randomInRange(min, max), randomInRange(min, max));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Hittable.ts\n\nclass HitRecord {\n    constructor(p = null, t = null, normal = null) {\n        this.p = p;\n        this.t = t;\n        this.normal = normal;\n    }\n    setFaceNormal(r, outwardNormal) {\n        this.frontFace = Vector_Vector.dot(r.direction, outwardNormal) < 0;\n        this.normal = this.frontFace ? outwardNormal : outwardNormal.multiplyNum(-1);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Ray.ts\n\n\nclass Ray {\n    constructor(origin, direction) {\n        this.origin = origin;\n        this.direction = direction;\n    }\n    at(t) {\n        return this.origin.add(this.direction.multiplyNum(t));\n    }\n    hitSphere(center, radius, r) {\n        let oc = r.origin.subtract(center);\n        let a = r.direction.length_squared();\n        let halfB = Vector_Vector.dot(oc, r.direction);\n        let c = oc.length_squared() - radius * radius;\n        const discriminant = halfB * halfB - a * c;\n        if (discriminant < 0) {\n            return -1;\n        }\n        return (-halfB - Math.sqrt(discriminant)) / a;\n    }\n    color(world, depth) {\n        if (depth <= 0)\n            return new Vector_Vector(0, 0, 0);\n        let rec = new HitRecord();\n        if (world.hit(this, 0.00001, Infinity, rec)) {\n            let scattered = new Ray(null, null);\n            let attenuation = new Vector_Vector(0, 0, 0);\n            if (rec.material.scatter(this, rec, attenuation, scattered))\n                return attenuation.multiply(scattered.color(world, depth - 1));\n            return new Vector_Vector(0, 0, 0);\n        }\n        let unitDirection = Vector_Vector.unitVector(this.direction);\n        let t = .5 * (unitDirection.y + 1);\n        const white = new Vector_Vector(1, 1, 1);\n        const blue = new Vector_Vector(.5, .7, 1);\n        return white\n            .multiplyNum(1 - t)\n            .add(blue.multiplyNum(t));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Camera.ts\n\n\n\nclass Camera {\n    constructor(lookFrom, lookAt, vUp, vFov, aspectRatio, aperture, focusDist) {\n        this.lookFrom = lookFrom;\n        this.lookAt = lookAt;\n        this.vUp = vUp;\n        this.vFov = vFov;\n        this.aspectRatio = aspectRatio;\n        this.aperture = aperture;\n        this.focusDist = focusDist;\n        this.init();\n    }\n    moveRight() {\n        this.lookFrom.z += .5;\n        this.init();\n    }\n    moveLeft() {\n        this.lookFrom.z -= .5;\n        this.init();\n    }\n    moveUp() {\n        this.lookFrom.y += .5;\n        this.init();\n    }\n    moveDown() {\n        this.lookFrom.y -= .5;\n        this.init();\n    }\n    zoomIn() {\n        this.vFov -= .5;\n        this.init();\n    }\n    zoomOut() {\n        this.vFov += .5;\n        this.init();\n    }\n    init() {\n        let theta = degreesToRadians(this.vFov);\n        let h = Math.tan(theta / 2);\n        this.viewportHeight = 2 * h;\n        this.viewportWidth = this.aspectRatio * this.viewportHeight;\n        let w = Vector_Vector.unitVector(this.lookFrom.subtract(this.lookAt));\n        this.u = Vector_Vector.unitVector(Vector_Vector.cross(this.vUp, w));\n        this.v = Vector_Vector.cross(w, this.u);\n        this.lensRadius = this.aperture / 2;\n        this.origin = this.lookFrom;\n        this.horizontal = this.u.multiplyNum(this.viewportWidth).multiplyNum(this.focusDist);\n        this.vertical = this.v.multiplyNum(this.viewportHeight).multiplyNum(this.focusDist);\n        this.lowerLeftCorner = this.origin\n            .subtract(this.horizontal.divideNum(2))\n            .subtract(this.vertical.divideNum(2))\n            .subtract(w.multiplyNum(this.focusDist));\n    }\n    getRay(s, t) {\n        let rd = randomInUnitDisk().multiplyNum(this.lensRadius);\n        let offset = this.u.multiplyNum(rd.x)\n            .add(this.v.multiplyNum(rd.y));\n        return new Ray(this.origin.add(offset), this.lowerLeftCorner\n            .add(this.horizontal.multiplyNum(s))\n            .add(this.vertical.multiplyNum(t))\n            .subtract(this.origin)\n            .subtract(offset));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/HittableList.ts\nclass HittableList {\n    constructor() {\n        this.list = [];\n    }\n    add(object) {\n        this.list.push(object);\n    }\n    clear() {\n        this.list = [];\n    }\n    hit(r, tMin, tMax, record) {\n        let tempRec = record;\n        let hitAnything = false;\n        let closestSoFar = tMax;\n        for (let object of this.list) {\n            if (object.hit(r, tMin, closestSoFar, tempRec)) {\n                hitAnything = true;\n                closestSoFar = tempRec.t;\n                this.merge(record, tempRec);\n            }\n        }\n        return hitAnything;\n    }\n    merge(target, object) {\n        target.normal = object.normal;\n        target.frontFace = object.frontFace;\n        target.material = object.material;\n        target.p = object.p;\n        target.t = object.t;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Material.ts\n\n\n\nclass Lambertian {\n    constructor(color) {\n        this.color = color;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let scatterDirection = rec.normal.add(randomUnitVector());\n        if (scatterDirection.nearZero())\n            scatterDirection = rec.normal;\n        Object.assign(scattered, new Ray(rec.p, scatterDirection));\n        Object.assign(attenuation, this.color);\n        return true;\n    }\n}\nclass Metal {\n    constructor(color, fuzz) {\n        this.color = color;\n        this.fuzz = fuzz;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let reflect = Vector_Vector.reflect(Vector_Vector.unitVector(rIn.direction), rec.normal);\n        Object.assign(scattered, new Ray(rec.p, reflect.add(randomInUnitSphere().multiplyNum(this.fuzz))));\n        Object.assign(attenuation, this.color);\n        return Vector_Vector.dot(scattered.direction, rec.normal) > 0;\n    }\n}\nclass Dielectric {\n    constructor(indexOfRefraction) {\n        this.indexOfRefraction = indexOfRefraction;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let refractionRatio = rec.frontFace ? 1 / this.indexOfRefraction : this.indexOfRefraction;\n        let unitDirection = Vector_Vector.unitVector(rIn.direction);\n        let cosTheta = Math.min(Vector_Vector.dot(unitDirection.multiplyNum(-1), rec.normal), 1);\n        let sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n        let cannotRefract = refractionRatio * sinTheta > 1;\n        let direction;\n        if (cannotRefract || this.reflectance(cosTheta, refractionRatio) > Math.random())\n            direction = Vector_Vector.reflect(unitDirection, rec.normal);\n        else\n            direction = Vector_Vector.refract(unitDirection, rec.normal, refractionRatio);\n        Object.assign(scattered, new Ray(rec.p, direction));\n        Object.assign(attenuation, new Vector_Vector(1, 1, 1));\n        return true;\n    }\n    reflectance(cosine, refIdx) {\n        let r0 = (1 - refIdx) / (1 + refIdx);\n        r0 = r0 * r0;\n        return r0 + (1 - r0) * Math.pow((1 - cosine), 5);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Sphere.ts\n\nclass Sphere {\n    constructor(center, radius, material) {\n        this.center = center;\n        this.radius = radius;\n        this.material = material;\n    }\n    hit(r, tMin, tMax, rec) {\n        let oc = r.origin.subtract(this.center);\n        let a = r.direction.length_squared();\n        let halfB = Vector_Vector.dot(oc, r.direction);\n        let c = oc.length_squared() - this.radius * this.radius;\n        let discriminant = halfB * halfB - a * c;\n        if (discriminant < 0)\n            return false;\n        let sqrt = Math.sqrt(discriminant);\n        let root = (-halfB - sqrt) / a;\n        if (root < tMin || tMax < root) {\n            root = (-halfB + sqrt) / a;\n            if (root < tMin || tMax < root)\n                return false;\n        }\n        rec.t = root;\n        rec.p = r.at(rec.t);\n        let outwardNormal = rec.p\n            .subtract(this.center)\n            .divideNum(this.radius);\n        rec.setFaceNormal(r, outwardNormal);\n        rec.material = this.material;\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/RandomScene.ts\n\n\n\n\n\nclass RandomScene {\n    constructor() {\n        this.world = new HittableList();\n        this.groundMat = new Lambertian(new Vector_Vector(.5, .5, .5));\n        this.world.add(new Sphere(new Vector_Vector(0, -1000, 0), 1000, this.groundMat));\n        const balls = 5;\n        for (let a = -balls; a < balls; a++) {\n            for (let b = -balls; b < balls; b++) {\n                let autoChooseMat = Math.random();\n                let center = new Vector_Vector(a + 0.9 * Math.random(), 0.2, b + 0.9 * Math.random());\n                if ((center.subtract(new Vector_Vector(4, 0.2, 0))).length() > 0.9) {\n                    let r = randomInRange(.01, .4);\n                    if (autoChooseMat < 0.8) {\n                        // diffuse\n                        let albedo = Vector_Vector.random().multiply(Vector_Vector.random());\n                        let sphereMaterial = new Lambertian(albedo);\n                        this.world.add(new Sphere(center, r, sphereMaterial));\n                    }\n                    else if (autoChooseMat < 0.95) {\n                        // metal\n                        let albedo = Vector_Vector.randomInRange(0.5, 1);\n                        let fuzz = randomInRange(0, 0.5);\n                        let sphereMaterial = new Metal(albedo, fuzz);\n                        this.world.add(new Sphere(center, r, sphereMaterial));\n                    }\n                    else {\n                        // glass\n                        let sphereMaterial = new Dielectric(1.5);\n                        this.world.add(new Sphere(center, r, sphereMaterial));\n                    }\n                }\n            }\n        }\n        let material1 = new Dielectric(1.5);\n        this.world.add(new Sphere(new Vector_Vector(0, 1, 0), randomInRange(.3, 1.5), material1));\n        let material2 = new Lambertian(new Vector_Vector(0.4, 0.2, 0.1));\n        this.world.add(new Sphere(new Vector_Vector(-4, 1, 0), randomInRange(.3, 1.5), material2));\n        let material3 = new Metal(new Vector_Vector(0.7, 0.6, 0.5), 0.0);\n        this.world.add(new Sphere(new Vector_Vector(4, 1, 0), randomInRange(.3, 1.5), material3));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Stats.ts\nclass Stats {\n    constructor() {\n        this.start = new Date().getTime();\n        this.message = `Use arrow keys to move camera, 'o' - zoom out, 'i' - zoom in`;\n        this.el = document.createElement(\"pre\");\n        this.el.innerText = this.message;\n        document.body.appendChild(this.el);\n    }\n    set(totalPixels, renderedPixels, pointsPerFrame) {\n        let percentage = Math.round(renderedPixels / totalPixels * 100);\n        let now = new Date().getTime();\n        let duration = now - this.start;\n        let elapsedMinutes = Math.floor(duration / (1000 * 60));\n        let elapsedSeconds = Math.floor((duration - (elapsedMinutes * 1000 * 60)) / 1000);\n        this.el.innerText = `${this.message} || ${percentage}% || ${elapsedMinutes}:${elapsedSeconds} elapsed`;\n    }\n}\nconst stats = new Stats();\n\n;// CONCATENATED MODULE: ./src/Renderer.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\nconst ASPECT_RATIO = 3 / 2;\nconst lookFrom = new Vector_Vector(13, 2, 3);\nconst lookAt = new Vector_Vector(0, 0, 0);\nconst vup = new Vector_Vector(0, 1, 0);\nconst distToFocus = 10;\nconst aperture = .1;\nconst imageWidth = 1000;\nclass Renderer {\n    static createCanvas() {\n        if (this.canvas)\n            return;\n        this.IMAGE_HEIGHT = Math.round(this.IMAGE_WIDTH / ASPECT_RATIO);\n        this.canvas = document.createElement('canvas');\n        this.canvas.setAttribute('style', 'transform: rotate(180deg)');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.setAttribute('width', `${this.IMAGE_WIDTH}px`);\n        this.canvas.setAttribute('height', `${this.IMAGE_HEIGHT}px`);\n        document.body.appendChild(this.canvas);\n        this.imageData = this.ctx.createImageData(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\n        this.data = this.imageData.data;\n        for (let j = this.IMAGE_HEIGHT - 1; j >= 0; --j) {\n            for (let i = 0; i < this.IMAGE_WIDTH; ++i) {\n                this.temlatePoints.push([i, j]);\n            }\n        }\n        this.temlatePoints = this.temlatePoints.sort(() => Math.random() - .5);\n    }\n    static wait(time = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => setTimeout(resolve, time));\n        });\n    }\n    static smartRender() {\n        let cancel = () => Promise.resolve();\n        let canceled = false;\n        function run() {\n            return __awaiter(this, void 0, void 0, function* () {\n                let render = Renderer.quickRender();\n                cancel = render.cancel;\n                yield render.action;\n                if (canceled)\n                    return;\n                render = Renderer.fullRender();\n                cancel = render.cancel;\n                yield render.action;\n            });\n        }\n        run();\n        return () => __awaiter(this, void 0, void 0, function* () {\n            console.log('cancel');\n            canceled = true;\n            return cancel();\n        });\n    }\n    static quickRender() {\n        return this.render(1, 3, false);\n    }\n    static fullRender() {\n        return this.render(10, 20, true);\n    }\n    static render(samplesPerPixel, maxDepth, showStats = false) {\n        let cancelled = false;\n        this.firstRun = false;\n        const render = () => __awaiter(this, void 0, void 0, function* () {\n            this.renderPoints = this.temlatePoints;\n            const frameLength = 1000 / 24;\n            console.log('render frameLength', frameLength);\n            let start = new Date().getTime();\n            showStats && stats.set(this.renderPoints.length, 0, 0);\n            for (let count = 0; count < this.renderPoints.length; count++) {\n                let [i, j] = this.renderPoints[count];\n                this.renderRay(i, j, samplesPerPixel, maxDepth);\n                let now = new Date().getTime();\n                if (now - start > frameLength) {\n                    this.ctx.putImageData(this.imageData, 0, 0);\n                    now = new Date().getTime();\n                    yield this.wait(1000 / 24 - (now - start));\n                    if (cancelled) {\n                        return;\n                    }\n                    showStats && stats.set(this.renderPoints.length, count, 0);\n                    start = now;\n                }\n            }\n            this.ctx.putImageData(this.imageData, 0, 0);\n        });\n        return {\n            action: render(),\n            cancel: () => __awaiter(this, void 0, void 0, function* () {\n                console.log('canceling');\n                this.ctx.putImageData(this.imageData, 0, 0);\n                yield this.wait(1000 / 24);\n                cancelled = true;\n            })\n        };\n    }\n    static renderRay(i, j, samplesPerPixel, maxDepth) {\n        let color = new Vector_Vector(0, 0, 0);\n        for (let s = 0; s < samplesPerPixel; ++s) {\n            const u = (i + Math.random()) / (this.IMAGE_WIDTH - 1);\n            const v = (j + Math.random()) / (this.IMAGE_HEIGHT - 1);\n            let ray = this.camera.getRay(u, v);\n            color = color.add(ray.color(this.world, maxDepth));\n        }\n        const [r, g, b, a] = color.writeColor(samplesPerPixel);\n        const startIndex = (j * this.IMAGE_WIDTH * 4) + (i * 4);\n        this.data[startIndex] = r;\n        this.data[startIndex + 1] = g;\n        this.data[startIndex + 2] = b;\n        this.data[startIndex + 3] = a;\n    }\n}\nRenderer.IMAGE_WIDTH = imageWidth;\nRenderer.firstRun = true;\nRenderer.renderPoints = [];\nRenderer.temlatePoints = [];\nRenderer.world = new RandomScene().world;\n// Camera\nRenderer.camera = new Camera(lookFrom, lookAt, vup, 20, ASPECT_RATIO, aperture, distToFocus);\n\n;// CONCATENATED MODULE: ./src/index.ts\nvar src_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction debounce(func, interval) {\n    let called = 0;\n    return (...args) => {\n        let now = new Date().getTime();\n        if (now - called > interval) {\n            func.apply(func, args);\n            console.log('yes', now - called);\n            called = now;\n        }\n        else {\n            console.log('not');\n        }\n    };\n}\nfunction run() {\n    return src_awaiter(this, void 0, void 0, function* () {\n        Renderer.createCanvas();\n        document.body.addEventListener('keydown', debounce(onKeypress, 100));\n        let canceller;\n        function onKeypress(e) {\n            return src_awaiter(this, void 0, void 0, function* () {\n                e.preventDefault();\n                switch (e.keyCode) {\n                    case 37:\n                        yield canceller();\n                        Renderer.camera.moveLeft();\n                        canceller = Renderer.smartRender();\n                        break;\n                    case 39:\n                        yield canceller();\n                        Renderer.camera.moveRight();\n                        canceller = Renderer.smartRender();\n                        break;\n                    case 38:\n                        yield canceller();\n                        Renderer.camera.moveUp();\n                        canceller = Renderer.smartRender();\n                        break;\n                    case 40:\n                        yield canceller();\n                        Renderer.camera.moveDown();\n                        canceller = Renderer.smartRender();\n                        break;\n                    case 73:\n                        yield canceller();\n                        Renderer.camera.zoomIn();\n                        canceller = Renderer.smartRender();\n                        break;\n                    case 79:\n                        yield canceller();\n                        Renderer.camera.zoomOut();\n                        canceller = Renderer.smartRender();\n                        break;\n                }\n            });\n        }\n        canceller = Renderer.smartRender();\n    });\n}\nrun();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///915\n")})();