(()=>{"use strict";eval("\n// UNUSED EXPORTS: RendererSlaveWorker, default\n\n;// CONCATENATED MODULE: ./src/Utils.ts\n\nfunction degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\nfunction randomInRange(min, max) {\n    return min + (max - min) * Math.random();\n}\nfunction clamp(x, min, max) {\n    if (x < min)\n        return min;\n    if (x > max)\n        return max;\n    return x;\n}\nfunction randomInUnitSphere() {\n    while (true) {\n        let p = Vector_Vector.randomInRange(-1, 1);\n        if (p.length_squared() >= 1)\n            continue;\n        return p;\n    }\n}\nfunction randomUnitVector() {\n    return Vector_Vector.unitVector(randomInUnitSphere());\n}\nfunction randomInHemisphere(normal) {\n    let inUnitSphere = randomInUnitSphere();\n    if (Vector.dot(inUnitSphere, normal) > 0)\n        return inUnitSphere;\n    else\n        return inUnitSphere.multiplyNum(-1);\n}\nfunction randomInUnitDisk() {\n    while (true) {\n        let p = new Vector_Vector(randomInRange(-1, 1), randomInRange(-1, 1), 0);\n        if (p.length_squared() >= 1)\n            continue;\n        return p;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Vector.ts\n\nclass Vector_Vector {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    serialize() {\n        return {\n            x: this.x,\n            y: this.y,\n            z: this.z,\n            type: 'Vector',\n        };\n    }\n    static deserialize(o) {\n        return new Vector_Vector(o.x, o.y, o.z);\n    }\n    subtract(v) {\n        return new Vector_Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subtractNum(v) {\n        return new Vector_Vector(this.x - v, this.y - v, this.z - v);\n    }\n    subtractFrom(v) {\n        return new Vector_Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    add(v) {\n        return new Vector_Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addNum(v) {\n        return new Vector_Vector(this.x + v, this.y + v, this.z + v);\n    }\n    multiply(v) {\n        return new Vector_Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n    }\n    multiplyNum(v) {\n        return new Vector_Vector(this.x * v, this.y * v, this.z * v);\n    }\n    divide(v) {\n        return new Vector_Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n    }\n    divideNum(v) {\n        return new Vector_Vector(this.x / v, this.y / v, this.z / v);\n    }\n    length_squared() {\n        const sqrd = this.multiply(this);\n        return sqrd.x + sqrd.y + sqrd.z;\n    }\n    length() {\n        return Math.sqrt(this.length_squared());\n    }\n    writeColor(samplesPerPixel) {\n        return Vector_Vector.writeColor(this, samplesPerPixel);\n    }\n    nearZero() {\n        const s = 1e-8;\n        return (Math.abs(this.x) < s)\n            && (Math.abs(this.y) < s)\n            && (Math.abs(this.z) < s);\n    }\n    static reflect(v1, v2) {\n        return v1.subtract(v2.multiplyNum(2 * Vector_Vector.dot(v1, v2)));\n    }\n    static refract(v1, v2, etaiOverEtat) {\n        let cosTheta = Math.min(Vector_Vector.dot(v1.multiplyNum(-1), v2), 1);\n        let rOutPerp = v1.add(v2.multiplyNum(cosTheta))\n            .multiplyNum(etaiOverEtat);\n        let rOutParallel = v2.multiplyNum(-Math.sqrt(Math.abs(1 - rOutPerp.length_squared())));\n        return rOutPerp.add(rOutParallel);\n    }\n    static add(v1, v2) {\n        return v1.add(v2);\n    }\n    static subtract(v1, v2) {\n        return v1.subtract(v2);\n    }\n    static multiply(v1, v2) {\n        return v1.multiply(v2);\n    }\n    static multiplyNum(v1, v2) {\n        return v1.multiplyNum(v2);\n    }\n    static divide(t, v) {\n        return v.divideNum(t);\n    }\n    static dot(v1, v2) {\n        return v1.x * v2.x\n            + v1.y * v2.y\n            + v1.z * v2.z;\n    }\n    static cross(v1, v2) {\n        return new Vector_Vector(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n    }\n    static unitVector(v) {\n        return v.divideNum(v.length());\n    }\n    static writeColor(v, samplesPerPixel) {\n        let r = v.x;\n        let g = v.y;\n        let b = v.z;\n        let scale = 1 / samplesPerPixel;\n        r = Math.sqrt(scale * r);\n        g = Math.sqrt(scale * g);\n        b = Math.sqrt(scale * b);\n        return [\n            256 * clamp(r, 0, .999),\n            256 * clamp(g, 0, .999),\n            256 * clamp(b, 0, .999),\n            255,\n        ];\n    }\n    static random() {\n        return new Vector_Vector(Math.random(), Math.random(), Math.random());\n    }\n    static randomInRange(min, max) {\n        return new Vector_Vector(randomInRange(min, max), randomInRange(min, max), randomInRange(min, max));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Config.ts\nclass Config {\n    constructor() {\n        this.samplesPerPixel = 20;\n        this.maxDepth = 20;\n        this.imageWidth = 1000;\n        this.aspectRatio = 16 / 9;\n        this.imageHeight = Math.round(this.imageWidth / this.aspectRatio);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Hittable.ts\n\nclass HitRecord {\n    constructor(p = null, t = null, normal = null) {\n        this.p = p;\n        this.t = t;\n        this.normal = normal;\n    }\n    setFaceNormal(r, outwardNormal) {\n        this.frontFace = Vector_Vector.dot(r.direction, outwardNormal) < 0;\n        this.normal = this.frontFace ? outwardNormal : outwardNormal.multiplyNum(-1);\n    }\n}\nfunction sortHittables(from, list) {\n    let distances = new Map();\n    list.forEach(o => distances.set(o, o.distanceFrom(from)));\n    return list.sort((a, b) => distances.get(a) - distances.get(b));\n}\n\n;// CONCATENATED MODULE: ./src/HittableList.ts\n\nclass HittableList {\n    constructor() {\n        this.list = [];\n    }\n    distanceFrom(center) {\n        throw new Error('Method not implemented.');\n    }\n    static deserialize(object) {\n        let hittableList = new HittableList();\n        hittableList.list = object.list.map(deserialize);\n        return hittableList;\n    }\n    serialize() {\n        return {\n            list: this.list.map(o => o.serialize()),\n            type: 'HittableList',\n        };\n    }\n    add(object) {\n        this.list.push(object);\n    }\n    clear() {\n        this.list = [];\n    }\n    hit(r, tMin, tMax, record) {\n        let tempRec = record;\n        let hitAnything = false;\n        let closestSoFar = tMax;\n        for (let object of this.list) {\n            if (object.hit(r, tMin, closestSoFar, tempRec)) {\n                hitAnything = true;\n                closestSoFar = tempRec.t;\n                this.merge(record, tempRec);\n            }\n        }\n        return hitAnything;\n    }\n    merge(target, object) {\n        target.normal = object.normal;\n        target.frontFace = object.frontFace;\n        target.material = object.material;\n        target.p = object.p;\n        target.t = object.t;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Sphere.ts\n\n\nclass Sphere {\n    constructor(center, radius, material) {\n        this.center = center;\n        this.radius = radius;\n        this.material = material;\n    }\n    static deserialize(object) {\n        return new Sphere(deserialize(object.center), object.radius, deserialize(object.material));\n    }\n    serialize() {\n        return {\n            center: this.center.serialize(),\n            radius: this.radius,\n            material: this.material.serialize(),\n            type: 'Sphere',\n        };\n    }\n    distanceFrom(center) {\n        return Math.sqrt(Math.pow(this.center.x - center.x, 2) + Math.pow(this.center.y - center.y, 2) + Math.pow(this.center.z - center.z, 2));\n    }\n    hit(r, tMin, tMax, rec) {\n        let oc = r.origin.subtract(this.center);\n        let a = r.direction.length_squared();\n        let halfB = Vector_Vector.dot(oc, r.direction);\n        let c = oc.length_squared() - this.radius * this.radius;\n        let discriminant = halfB * halfB - a * c;\n        if (discriminant < 0)\n            return false;\n        let sqrt = Math.sqrt(discriminant);\n        let root = (-halfB - sqrt) / a;\n        if (root < tMin || tMax < root) {\n            root = (-halfB + sqrt) / a;\n            if (root < tMin || tMax < root)\n                return false;\n        }\n        rec.t = root;\n        rec.p = r.at(rec.t);\n        let outwardNormal = rec.p\n            .subtract(this.center)\n            .divideNum(this.radius);\n        rec.setFaceNormal(r, outwardNormal);\n        rec.material = this.material;\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Ray.ts\n\n\nclass Ray {\n    constructor(origin, direction) {\n        this.origin = origin;\n        this.direction = direction;\n    }\n    at(t) {\n        return this.origin.add(this.direction.multiplyNum(t));\n    }\n    color(world, depth) {\n        if (depth <= 0)\n            return new Vector_Vector(0, 0, 0);\n        let rec = new HitRecord();\n        if (world.hit(this, 0.00001, Infinity, rec)) {\n            let scattered = new Ray(null, null);\n            let attenuation = new Vector_Vector(0, 0, 0);\n            if (rec.material.scatter(this, rec, attenuation, scattered))\n                return attenuation.multiply(scattered.color(world, depth - 1));\n            else if (rec.material.lightSource(attenuation))\n                return attenuation;\n            return new Vector_Vector(0, 0, 0);\n        }\n        let unitDirection = Vector_Vector.unitVector(this.direction);\n        let t = .5 * (unitDirection.y + 1);\n        const white = new Vector_Vector(1, 1, 1);\n        const blue = new Vector_Vector(.5, .7, 1);\n        return white\n            .multiplyNum(1 - t)\n            .add(blue.multiplyNum(t));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Camera.ts\n\n\n\n\nclass Camera {\n    constructor(lookFrom, lookAt, vUp, vFov, aspectRatio, aperture, focusDist) {\n        this.lookFrom = lookFrom;\n        this.lookAt = lookAt;\n        this.vUp = vUp;\n        this.vFov = vFov;\n        this.aspectRatio = aspectRatio;\n        this.aperture = aperture;\n        this.focusDist = focusDist;\n        this.init();\n    }\n    static deserialize(o) {\n        return new Camera(deserialize(o.lookFrom), deserialize(o.lookAt), deserialize(o.vUp), o.vFov, o.aspectRatio, o.aperture, o.focusDist);\n    }\n    serialize() {\n        return {\n            type: 'Camera',\n            lookFrom: this.lookFrom.serialize(),\n            lookAt: this.lookAt.serialize(),\n            vUp: this.vUp.serialize(),\n            vFov: this.vFov,\n            aspectRatio: this.aspectRatio,\n            aperture: this.aperture,\n            focusDist: this.focusDist,\n        };\n    }\n    moveRight() {\n        this.lookFrom.z += .5;\n        this.init();\n    }\n    moveLeft() {\n        this.lookFrom.z -= .5;\n        this.init();\n    }\n    moveUp() {\n        this.lookFrom.y += .5;\n        this.init();\n    }\n    moveDown() {\n        this.lookFrom.y -= .5;\n        this.init();\n    }\n    zoomIn() {\n        this.vFov -= .5;\n        this.init();\n    }\n    zoomOut() {\n        this.vFov += .5;\n        this.init();\n    }\n    init() {\n        let theta = degreesToRadians(this.vFov);\n        let h = Math.tan(theta / 2);\n        this.viewportHeight = 2 * h;\n        this.viewportWidth = this.aspectRatio * this.viewportHeight;\n        let w = Vector_Vector.unitVector(this.lookFrom.subtract(this.lookAt));\n        this.u = Vector_Vector.unitVector(Vector_Vector.cross(this.vUp, w));\n        this.v = Vector_Vector.cross(w, this.u);\n        this.lensRadius = this.aperture / 2;\n        this.origin = this.lookFrom;\n        this.horizontal = this.u.multiplyNum(this.viewportWidth).multiplyNum(this.focusDist);\n        this.vertical = this.v.multiplyNum(this.viewportHeight).multiplyNum(this.focusDist);\n        this.lowerLeftCorner = this.origin\n            .subtract(this.horizontal.divideNum(2))\n            .subtract(this.vertical.divideNum(2))\n            .subtract(w.multiplyNum(this.focusDist));\n    }\n    getRay(s, t) {\n        let rd = randomInUnitDisk().multiplyNum(this.lensRadius);\n        let offset = this.u.multiplyNum(rd.x)\n            .add(this.v.multiplyNum(rd.y));\n        return new Ray(this.origin.add(offset), this.lowerLeftCorner\n            .add(this.horizontal.multiplyNum(s))\n            .add(this.vertical.multiplyNum(t))\n            .subtract(this.origin)\n            .subtract(offset));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Material.ts\n\n\n\n\nclass Lambertian {\n    constructor(color) {\n        this.color = color;\n    }\n    static deserialize(object) {\n        return new Lambertian(deserialize(object.color));\n    }\n    serialize() {\n        return {\n            type: 'Lambertian',\n            color: this.color.serialize(),\n        };\n    }\n    lightSource(attenuation) {\n        return false;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let scatterDirection = rec.normal.add(randomUnitVector());\n        if (scatterDirection.nearZero())\n            scatterDirection = rec.normal;\n        Object.assign(scattered, new Ray(rec.p, scatterDirection));\n        Object.assign(attenuation, this.color);\n        return true;\n    }\n}\nclass Light {\n    static deserialize(object) {\n        return new Light();\n    }\n    serialize() {\n        return {\n            type: 'Light',\n        };\n    }\n    constructor() {\n    }\n    lightSource(attenuation) {\n        Object.assign(attenuation, new Vector_Vector(1.9, 1.9, 1.9));\n        return true;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let scatterDirection = rec.normal.add(randomUnitVector());\n        if (scatterDirection.nearZero())\n            scatterDirection = rec.normal;\n        Object.assign(scattered, new Ray(rec.p, scatterDirection));\n        Object.assign(attenuation, new Vector_Vector(1.9, 1.9, 1.9));\n        return false;\n    }\n}\nclass Metal {\n    constructor(color, fuzz) {\n        this.color = color;\n        this.fuzz = fuzz;\n    }\n    static deserialize(object) {\n        return new Metal(deserialize(object.color), object.fuzz);\n    }\n    serialize() {\n        return {\n            type: 'Metal',\n            color: this.color.serialize(),\n            fuzz: this.fuzz,\n        };\n    }\n    lightSource(attenuation) {\n        return false;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let reflect = Vector_Vector.reflect(Vector_Vector.unitVector(rIn.direction), rec.normal);\n        Object.assign(scattered, new Ray(rec.p, reflect.add(randomInUnitSphere().multiplyNum(this.fuzz))));\n        Object.assign(attenuation, this.color);\n        return Vector_Vector.dot(scattered.direction, rec.normal) > 0;\n    }\n}\nclass Dielectric {\n    constructor(indexOfRefraction) {\n        this.indexOfRefraction = indexOfRefraction;\n    }\n    static deserialize(object) {\n        return new Dielectric(object.indexOfRefraction);\n    }\n    serialize() {\n        return {\n            type: 'Dielectric',\n            indexOfRefraction: this.indexOfRefraction\n        };\n    }\n    lightSource(attenuation) {\n        return false;\n    }\n    scatter(rIn, rec, attenuation, scattered) {\n        let refractionRatio = rec.frontFace ? 1 / this.indexOfRefraction : this.indexOfRefraction;\n        let unitDirection = Vector_Vector.unitVector(rIn.direction);\n        let cosTheta = Math.min(Vector_Vector.dot(unitDirection.multiplyNum(-1), rec.normal), 1);\n        let sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n        let cannotRefract = refractionRatio * sinTheta > 1;\n        let direction;\n        if (cannotRefract || this.reflectance(cosTheta, refractionRatio) > Math.random())\n            direction = Vector_Vector.reflect(unitDirection, rec.normal);\n        else\n            direction = Vector_Vector.refract(unitDirection, rec.normal, refractionRatio);\n        Object.assign(scattered, new Ray(rec.p, direction));\n        Object.assign(attenuation, new Vector_Vector(1, 1, 1));\n        return true;\n    }\n    reflectance(cosine, refIdx) {\n        let r0 = (1 - refIdx) / (1 + refIdx);\n        r0 = r0 * r0;\n        return r0 + (1 - r0) * Math.pow((1 - cosine), 5);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/deserialize.ts\n\n\n\n\n\nconst isHittableList = (o) => o.type == 'HittableList';\nconst isSphere = (o) => o.type == 'Sphere';\nconst isVector = (o) => o.type == 'Vector';\nconst isCamera = (o) => o.type == 'Camera';\nconst isLambertian = (o) => o.type == 'Lambertian';\nconst isLight = (o) => o.type == 'Light';\nconst isDielectric = (o) => o.type == 'Dielectric';\nconst isMetal = (o) => o.type == 'Metal';\nfunction deserialize(o) {\n    if (isHittableList(o))\n        return HittableList.deserialize(o);\n    if (isSphere(o))\n        return Sphere.deserialize(o);\n    if (isVector(o))\n        return Vector_Vector.deserialize(o);\n    if (isCamera(o))\n        return Camera.deserialize(o);\n    if (isLambertian(o))\n        return Lambertian.deserialize(o);\n    if (isLight(o))\n        return Light.deserialize(o);\n    if (isDielectric(o))\n        return Dielectric.deserialize(o);\n    if (isMetal(o))\n        return Metal.deserialize(o);\n    throw new Error(\"Could not deserialize \" + JSON.stringify(o));\n}\n\n;// CONCATENATED MODULE: ./node_modules/ts-loader/index.js!./node_modules/ts-loader/index.js!./src/RendererSlave.worker.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\nclass RendererSlaveWorker {\n    constructor() {\n        this.config = new Config();\n        this.running = false;\n        this.terminating = false;\n        self.onmessage = ({ data }) => {\n            if (data.terminate && this.running) {\n                this.terminating = true;\n            }\n            this.world = this.bufferToObject(data.world);\n            this.camera = this.bufferToObject(data.camera);\n            this.world.list.forEach(o => o.sortedHittables = sortHittables(o.center, this.world.list));\n            this.camera.sortedHittables = sortHittables(this.camera.lookFrom, this.world.list);\n            this.render(data.points, data.samplesPerPixel, data.maxDepth);\n        };\n    }\n    bufferToObject(buffer) {\n        let str = String.fromCharCode.apply(null, new Uint16Array(buffer));\n        let json = JSON.parse(str);\n        return deserialize(json);\n    }\n    wait(time = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(resolve => setTimeout(resolve, time));\n        });\n    }\n    render(points, samplesPerPixel, maxDepth) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let time = 0;\n            let result = [];\n            let from = [];\n            this.running = true;\n            for (let count = 0; count < points.length; count++, time++) {\n                if (this.terminating)\n                    break;\n                let curPoints = points[count];\n                from.push(curPoints);\n                result.push(...this.renderRay(curPoints[0], curPoints[1], samplesPerPixel, maxDepth));\n                if (time > 1000) {\n                    self.postMessage({\n                        result,\n                        from\n                    });\n                    time = 0;\n                    result = [];\n                    from = [];\n                    yield this.wait();\n                }\n            }\n            self.postMessage({\n                result,\n                from,\n                done: true,\n            });\n            this.running = false;\n            this.terminating = false;\n        });\n    }\n    renderRay(i, j, samplesPerPixel, maxDepth) {\n        let color = new Vector_Vector(0, 0, 0);\n        for (let s = 0; s < samplesPerPixel; ++s) {\n            const u = (i + Math.random()) / (this.config.imageWidth - 1);\n            const v = (j + Math.random()) / (this.config.imageHeight - 1);\n            let ray = this.camera.getRay(u, v);\n            color = color.add(ray.color(this.world, maxDepth));\n        }\n        const [r, g, b, a] = color.writeColor(samplesPerPixel);\n        return [r, g, b, a];\n    }\n}\nnew RendererSlaveWorker();\n/* harmony default export */ const RendererSlave_worker = (null);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///417\n")})();